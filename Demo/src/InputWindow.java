package src;

import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.SqlDateModel;
import org.pentaho.reporting.engine.classic.core.ReportProcessingException;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class InputWindow extends javax.swing.JFrame implements WindowListener, WindowFocusListener, WindowStateListener  {

    /**
     * Creates new form InputWindow
     */
    public InputWindow() {
        //Start Derby Driver
        this.dao = new DerbyDao();
        dao.getClients(names);
        System.out.println("DerbyDao started");

        this.state = new StateSerializer();

        allTabPanes = new ArrayList<>(4);
        for(int i = 0; i < 4; i++) {
            ArrayList<WellMap> newMapList = new ArrayList<>();
            ArrayList<String> newAnimalList = new ArrayList<>();
            DefaultTableModel model = new DefaultTableModel();
            WellMap startMap = new WellMap(newAnimalList, 1, 0, model);
            //startMap.setSingleModel((DefaultTableModel)jTable1.getModel());
            newMapList.add(startMap);
            allTestAnimals.add(i, newMapList);

            JTabbedPane newPane = new JTabbedPane();
            JScrollPane newScroll = new JScrollPane();
            JTable newTable = new JTable();
            makeNewTable(newTable);
            newScroll.setViewportView(newTable);
            newPane.add("Map 1", newScroll);
            allTabPanes.add(newPane);
        }

        currentTabPane = allTabPanes.get(0);
        currentTable = (JTable)((JViewport)((JScrollPane)currentTabPane.getComponent(0)).getComponent(0)).getComponent(0);

        initComponents();
        textFields.add(jTextField1);
        textFields.add(jTextField2);
        textFields.add(jTextField3);
        textFields.add(jTextField4);
        textFields.add(jTextField5);
        textFields.add(jTextField6);
        textFields.add(jTextField7);
        textFields.add(jTextField8);
        textFields.add(jTextField9);
        textFields.add(jTextField10);

        currentTest = new BLVTest();
        BLVTest blv = new BLVTest();
        CLTest cl = new CLTest();
        JohnesTest johnes = new JohnesTest();
        allTests = new ArrayList<>(4);
        allTests.add(currentTest);
        allTests.add(blv);
        allTests.add(cl);
        allTests.add(johnes);

        currentIndex = new ArrayList<>(4);
        currentIndex.add(0);
        currentIndex.add(0);
        currentIndex.add(0);
        currentIndex.add(0);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        final JPopupMenu pm = new JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new JTextField();
        jTextField2 = new JTextField();
        jTextField3 = new JTextField();
        jTextField4 = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jComboBox1 = new JComboBox<>();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        jTextField6 = new JTextField();
        jLabel10 = new JLabel();
        jLabel6 = new JLabel();
        jLabel8 = new JLabel();
        jTextField7 = new JTextField();
        jTextField8 = new JTextField();
        jLabel12 = new JLabel();
        jTextField10 = new JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jRadioButton1 = new JRadioButton();
        jRadioButton2 = new JRadioButton();
        jRadioButton3 = new JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new JLabel();
        jComboBox2 = new JComboBox<>();
        jLabel9 = new JLabel();
        jTextField5 = new JTextField();
        jLabel11 = new JLabel();
        jTextField9 = new JTextField();
        jPanel6 = new javax.swing.JPanel();
        jTextField11 = new JTextField();
        jButton5 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        //jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(this);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Data"));
        jPanel1.setToolTipText("");
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1080, 94));

        jLabel1.setText("Company Name:");

        jLabel2.setText("Address:");

        jLabel3.setText("City:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "MD", "MA", "MI", "MN", "MS", "MO", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", " " }));

        jLabel4.setText("State:");

        jLabel5.setText("Zip:");

        jLabel10.setText("Email Address:");

        jLabel6.setText("Phone One:");

        jLabel8.setText("Phone Two:");

        jLabel12.setText("Client Name:");

        //Set up autocomplete on the company name
        jTextField10.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                switch(e.getKeyCode()) {
                    case KeyEvent.VK_BACK_SPACE:
                        break;
                    case KeyEvent.VK_ENTER:
                        jTextField10.setText(jTextField10.getText());
                        Client existing = dao.getOneClient(jTextField10.getText());
                        if (existing == null) {
                            JOptionPane.showMessageDialog(null, "Client not found.");
                        } else {
                            existingClient = true;
                            setExistingClient(existing);
                        }
                        break;
                    default:
                        EventQueue.invokeLater(new Runnable() {
                            @Override

                            public void run() {
                                String txt = jTextField10.getText();
                                autoComplete(txt);
                            }
                        });
                        break;
                }
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                        .addComponent(jTextField10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                        .addComponent(jTextField2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel10)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextField8))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel12)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel3)
                                                .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel8)
                                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(65, 65, 65))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null}
                },
                new String [] {
                        "Animal ID"
                }
        ));

        jTable2.addKeyListener(new ClipboardKeyAdapter(jTable2));
        jScrollPane2.setViewportView(jTable2);

        jButton1.setText("Add Field");
        jButton1.addActionListener(this::jButton1ActionPerformed);

        jButton2.setText("Next Customer");
        jButton2.addActionListener(this::jButton2ActionPerformed);

        jButton3.setText("Generate");
        jButton3.addActionListener(this::jButton3ActionPerformed);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton1)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jButton2)
                                                .addComponent(jButton3)))
                                .addContainerGap(455, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(14, 14, 14)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3)
                                .addContainerGap(46, Short.MAX_VALUE))
        );


        jButton4.setText("Add Well Map");
        jButton4.addActionListener(this::jButton4ActionPerformed);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Test Select"));

        jRadioButton1.setText("BLV");
        jRadioButton1.addActionListener(this::jRadioButton1ActionPerformed);

        jRadioButton2.setText("CL");
        jRadioButton2.addActionListener(this::jRadioButton2ActionPerformed);

        jRadioButton3.setText("Johne's");
        jRadioButton3.addActionListener(this::jRadioButton3ActionPerformed);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton3))
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jRadioButton1)
                                        .addComponent(jRadioButton2)
                                        .addComponent(jRadioButton3)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Test Data"));

        jLabel7.setText("Date Tested:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sheep", "Cow", "Goat", "Buffalo", "Other" }));

        jLabel9.setText("Animal Type:");

        //Default value is today
        Long millis = System.currentTimeMillis();
        java.sql.Date date = new java.sql.Date(millis);
        SqlDateModel model = new SqlDateModel();
        model.setValue(date);
        //UtilDateModel model = new UtilDateModel();
        //model.setDate(20,04,2014);
        // Need this...
        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");

        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);

        datePicker = new JDatePickerImpl(datePanel, new CustomDateFormatter());

        jLabel11.setText("LOGID:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(datePicker, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        //.addComponent(datePicker, 0, javax.swing.GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                //.addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                //.addGap(8, 8, 8)
                                //.addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField9)
                                .addGap(15, 15, 15))
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        //.addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        //.addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel9)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Plate Data"));

        jButton5.setText("Import Plate Data");
        jButton5.addActionListener(this::jButton5ActionPerformed);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField11)
                                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5))
        );

        /*
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {"A", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"B", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"C", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"D", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"E", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"F", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"G", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"H", null, null, null, null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "Plate Visualizer", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
                }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable1.setRowHeight(32);
        //jTable1 and ScrollPanel aren't actually being called
        jScrollPane1.setViewportView(jTable1);*/

        for(int i = 0; i < 4; i++) {
            allTabPanes.get(i).addChangeListener(this::tabChanged);
            jPanel7.add(allTabPanes.get(i), i);
        }

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(currentTabPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 322, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(currentTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Print Map");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Import Client Data");
        jMenu1.add(jMenuItem2);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenuItem3.setText("Export Client Data");
        jMenu1.add(jMenuItem3);
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(25, 25, 25)
                                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(14, 14, 14)
                                                .addComponent(jButton4)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton4)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        //add field button
        DefaultTableModel jTable2model = (DefaultTableModel) jTable2.getModel();
        jTable2model.addRow(new String[]{""});
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        //Add customer to table button / Next Customer

        int animalCount;

        //check if a test is selected

        if (testID != -1) {
            //print all fields (delete later)
            for (JTextField e : textFields) {
                System.out.println("Field data: "+ e.getText());
            }
            if (jTextField9.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "LogID required.");
                return;
            }
            //deselect field
            if (logIDRegex(jTextField9.getText())) {
                //add animals to map
                animalCount = fillTable(0);
                //save customer info and animal count
                saveCustomer(animalCount);
                //clear table (currently done in filltable)
            } else {
                JOptionPane.showMessageDialog(null, "LogID invalid format. Accepted format is OMDDYYXXX or OMMDDYYXXX");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select a test.");

        }
    }

    /* Used to enforce the format of the LogID. Narrowed the field to only accept OMMDDYYXXX */
    private boolean logIDRegex(String logID) {
        boolean proper = true;
        //String pattern = "O((0|1)\\d{1})((0|1|2|3)\\d{1})(\\d{2})(\\d{3})";
        String pattern = "(O((0|1)\\d{1})((0|1|2|3)\\d{1})(\\d{2})(\\d{3})|O\\d{1}(0|1|2|3)\\d{1}(\\d{2})(\\d{3}))";

        // Create a Pattern object
        Pattern r = Pattern.compile(pattern);

        // Now create matcher object.
        Matcher m = r.matcher(logID);
        if(!m.matches()) {
            proper = false;
        }
        return proper;
    }


    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        //generate button
        ArrayList<Float> parsedArrangedData = new ArrayList<Float>();
        ArrayList<Report> repToGen = new ArrayList<>();
        JTable curTable;
        WellMap curMap;
        for(int outer = 0; outer < currentTabPane.getTabCount(); outer++) {
            curMap = allTestAnimals.get(testID).get(outer);
            int dataIndex = 4;
            //If current map does not have an uploaded results file then don't add animals and don't generate reports
            if(!curMap.resultFile.isEmpty()) {
                //Don't need to color just using to populate the correct parseplatereader
                curTable = (JTable)((JViewport)((JScrollPane)currentTabPane.getComponent(outer)).getComponent(0)).getComponent(0);
                ColorCells cs = new ColorCells(curTable, curMap.resultFile, testID, (String) jComboBox2.getSelectedItem());
                System.out.println("Generating Report");
                //ParsePlateReaderData has static testValue, so call basic constructor
                // and arrange the values grabbed from the first parse
                ParsePlateReaderData parser = new ParsePlateReaderData(testID);
                parsedArrangedData = parser.arrangeValues();
                System.out.println("report count: " + currentTest.reportList.size());
                //give the report objects the amount of values they need

                getCellValues(curTable, curMap.getFillX(), curMap.getFillY());
                int animalListCount = 0;
                for (Report n : currentTest.reportList) {
                    if (n.getWellMap() == outer) {
                        addReport(n);
                        n.setControlValues(parser.getControlValues());
                        for (int i = 0; i < n.getAnimalCount(); i++) {
                            n.addTestResult(parsedArrangedData.get(dataIndex));
                            System.out.println("Added: " + parsedArrangedData.get(dataIndex));
                            dataIndex++;
                        }
                        //All test results added to a single test, calculate results and add to database
                        n.addFinalAnimals(animalListCount, currentTest.animalIDList);
                        animalListCount = animalListCount + n.getAnimalCount();
                        //It's a report that should be generated so add to the list
                        repToGen.add(n);
                    }
                }
            }
            currentTest.animalIDList.clear();
        }


        boolean allMade = true;
        ArrayList<String> clientCheck = new ArrayList<>();
        ArrayList<Report> repsNotMade = new ArrayList<>();

        for (Report r : repToGen) {

            if(!clientCheck.contains(r.getSingleClient().getCompanyName())) {
                clientCheck.add(r.getSingleClient().getCompanyName());
                boolean made = printReport(r);
                //If the report was made successfully then delete the animals from the database
                //Should remove confusion about which animals belong to which client and which logID
                if (made) {
                    System.out.println("Generated Report For: " + r.getSingleClient().getCompanyName());
                    dao.removeAnimals(r.getSingleClient().getCompanyName(), r.getLogID(), r.getAnimalType());
                } else {
                    System.err.println("Report not generated for " + r.getSingleClient().getCompanyName());
                    allMade = false;
                    repsNotMade.add(r);
                }
            }

        }

        //TODO: Modify this to remove all tabs and reset the correct values
        if(allMade) {
            //clearMap(jTable1);
            clearMap(currentTable);
            currentTest.reportList.clear();
            currentTest.animalIDList.clear();
            jTextField11.setText("");
            allTestAnimals.get(testID).get(0).fillX = 1;
            allTestAnimals.get(testID).get(0).fillY = 0;
            allTestAnimals.get(testID).get(0).setAnimalList(currentTest.animalIDList);
            setTestGUI(testID);
        }

    }

    private void addReport(Report report) {
        DerbyDao dao = new DerbyDao();

        //Primary Key is an auto incremented int field and has no other primary key
        dao.addReport(report.getLogID(), report.getAnimalType(), report.getReceived(), report.getTested(), fileName, report.getSingleClient().getCompanyName());
    }

    private boolean printReport(Report report) {
        String clientName = report.getSingleClient().getCompanyName();
        final File outputFilename = new File(clientName + "Report" + ".pdf");
        boolean made = false;
        // Generate the report
        try {
            new ReportGenerator(report).generateReport(AbstractReportGenerator.OutputType.PDF, outputFilename);
            made = true;

        } catch (IOException | ReportProcessingException e) {
            e.printStackTrace();
            made = false;
        }

        // Output the location of the file
        //JOptionPane.showMessageDialog(null, "Generated report for " + clientName);
        return made;
    }

    //Tried to save off entire DefaultTableModel but it saved by reference, it was not a copy
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        //BLV Test
        if(testID != -1) {
            saveValues();
        }

        testID = 1;
        currentTest = allTests.get(testID);
        currentTabPane = allTabPanes.get(testID);
        setTabbedPanePanel(testID);
        currentTable = (JTable)((JViewport)((JScrollPane)currentTabPane.getComponent(currentTabPane.getSelectedIndex())).getComponent(0)).getComponent(0);

        setTestVals(1);
        populateTestValues();

        String selectedFilePath = allTestAnimals.get(testID).get(currentIndex.get(testID)).resultFile;
        if(!selectedFilePath.isEmpty()) {
            ColorCells cs = new ColorCells(currentTable, selectedFilePath, testID, (String) jComboBox2.getSelectedItem());
            currentTable.repaint();
        }

    }

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        //CL Test
        if(testID != -1) {
            saveValues();
        }

        testID = 2;
        currentTest = allTests.get(testID);
        currentTabPane = allTabPanes.get(testID);
        setTabbedPanePanel(testID);
        currentTable = (JTable)((JViewport)((JScrollPane)currentTabPane.getComponent(currentTabPane.getSelectedIndex())).getComponent(0)).getComponent(0);

        setTestVals(2);
        populateTestValues();

        String selectedFilePath = allTestAnimals.get(testID).get(currentIndex.get(testID)).resultFile;
        if(!selectedFilePath.isEmpty()) {
            ColorCells cs = new ColorCells(currentTable, selectedFilePath, testID, (String) jComboBox2.getSelectedItem());
            currentTable.repaint();
        }
    }

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        //Johne's Test

        if(testID != -1) {
            saveValues();
        }

        testID = 3;
        currentTest = allTests.get(testID);
        currentTabPane = allTabPanes.get(testID);
        setTabbedPanePanel(testID);
        currentTable = (JTable)((JViewport)((JScrollPane)currentTabPane.getComponent(currentTabPane.getSelectedIndex())).getComponent(0)).getComponent(0);

        setTestVals(3);
        populateTestValues();

        String selectedFilePath = allTestAnimals.get(testID).get(currentIndex.get(testID)).resultFile;
        if(!selectedFilePath.isEmpty()) {
            ColorCells cs = new ColorCells(currentTable, selectedFilePath, testID, (String) jComboBox2.getSelectedItem());
            currentTable.repaint();
        }

    }

    private void saveValues() {
        int index = currentIndex.get(testID);
        WellMap map = allTestAnimals.get(testID).get(index);
        getCellValues(currentTable, map.getFillX(), map.getFillY());
        map.setAnimalList(currentTest.animalIDList);
        currentTest.animalIDList.clear();

    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {

        System.out.println("Add Well Map Pressed");
        if(testID != -1) {
            System.out.println("In Well Map Add");
            ArrayList<String> newAnimalList = new ArrayList<>();
            DefaultTableModel model = new DefaultTableModel();
            WellMap newWellMap = new WellMap(newAnimalList, 1, 0, model);
            allTestAnimals.get(testID).add(newWellMap);
            JTable newTable = new JTable();
            makeNewTable(newTable);
            JScrollPane newScroll = new JScrollPane(newTable, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            newScroll.setViewportView(newTable);
            //clearMap(jTable1);
            int numTab = currentTabPane.getTabCount() + 1;
            currentTabPane.add("Map " + numTab, newScroll);



        } else {
            JOptionPane.showMessageDialog(null, "Select a test.");
        }

    }


    private void setTabbedPanePanel(int newIndex) {
        JTabbedPane newPane = allTabPanes.get(newIndex);
        for(int i = 0; i < 4; i++) {
            if(i != newIndex) {
                jPanel7.getComponent(i).setVisible(false);
            } else {
                jPanel7.getComponent(i).setVisible(true);
            }
        }


        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(newPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 322, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(newPane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel7.repaint();
    }

    private void makeNewTable(JTable table) {
        table.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {"A", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"B", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"C", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"D", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"E", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"F", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"G", null, null, null, null, null, null, null, null, null, null, null, null},
                        {"H", null, null, null, null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "Plate Visualizer", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
                }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        table.setRowHeight(32);
    }


    private void tabChanged(ChangeEvent change) {
        JTabbedPane sourceTabbedPane = (JTabbedPane) change.getSource();

        int index = sourceTabbedPane.getSelectedIndex();
        System.out.println("Tab changed to: " + sourceTabbedPane.getTitleAt(index));
        saveValues();

        currentTable = (JTable)((JViewport)((JScrollPane)currentTabPane.getComponent(index)).getComponent(0)).getComponent(0);

        setTestVals(testID);
        populateTestValues();
        currentIndex.set(testID, index);
        String selectedFilePath = allTestAnimals.get(testID).get(currentIndex.get(testID)).resultFile;
        if(!selectedFilePath.isEmpty()) {
            ColorCells cs = new ColorCells(currentTable, selectedFilePath, testID, (String) jComboBox2.getSelectedItem());
            currentTable.repaint();
        }
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {
        JMenuItem source = (JMenuItem)(evt.getSource());
        String s = "Action event detected." + "\n" + "Event source: " + source.getText();
        System.out.println(s + "/n");

        if (source == jMenuItem1) {

            try {
                if (!currentTable.print()) {
                    System.err.println("User cancelled printing");
                }
            } catch (java.awt.print.PrinterException e) {
                System.err.format("Cannot print %s%n", e.getMessage());
            }
        }

        if (source == jMenuItem3) {
            dao.exportClients();
        }
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        //Import Plate Data Button
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File (System.getProperty("user.dir")));
        chooser.showOpenDialog(null);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileName = chooser.getSelectedFile().getName();
        String selectedFilePath = chooser.getSelectedFile().getAbsolutePath();
        System.out.println("Selected file path: " + selectedFilePath);
        jTextField11.setText(selectedFilePath);

        if(testID != -1) {
            //ColorCells cs = new ColorCells(jTable1, selectedFilePath, testID,(String) jComboBox2.getSelectedItem());
            //jTable1.repaint();
            allTestAnimals.get(testID).get(currentIndex.get(testID)).resultFile = selectedFilePath;
            ColorCells cs = new ColorCells(currentTable, selectedFilePath, testID,(String) jComboBox2.getSelectedItem());
            currentTable.repaint();
            parsedValues = cs.getParsedData();
        } else {
            JOptionPane.showMessageDialog(null, "Select a test.");
            jTextField11.setText("");
        }
    }

    private void autoComplete(String text) {
        String complete = "";
        int start = text.length();
        int last = text.length();

        int a;
        for(a = 0; a < names.size(); a++) {
            if (names.get(a).startsWith(text)) {
                complete = names.get(a);
                last = complete.length();
                break;
            }
        }

        if(last > start) {
            jTextField10.setText(complete);
            jTextField10.setCaretPosition(last);
            jTextField10.moveCaretPosition(start);
        }
    }

    private void setExistingClient(Client client) {

        jTextField1.setText(client.getName());
        jTextField2.setText(client.getAddress());
        jTextField3.setText(client.getCity());
        jComboBox1.setSelectedItem(client.getState());
        jTextField4.setText(client.getZip());
        jTextField6.setText(client.getEmail());
        jTextField7.setText(client.getPhoneOne());
        jTextField8.setText(client.getPhoneTwo());
    }

    private void printCurrentAnimalList(){

        for (String e : currentTest.animalIDList) {
            System.out.println("In List: " + e);
        }
    }

    /*
     * This method sets test values on the visible table. It clears all values first, then
     * sets the test values, then calls fillTable(1) which refills the table with existing
     * animal information if possible
     */
    private void populateTestValues() {
        //DefaultTableModel jTable1model = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel jTable1model = (DefaultTableModel) currentTable.getModel();

        int tableOffset = 1;
        //clearMap(jTable1);
        clearMap(currentTable);
        switch (testID) {

            case 1:
                System.out.println("BLV test selected");
                jTable1model.setValueAt("NEGATIVE", 2, 1 + tableOffset);
                jTable1model.setValueAt("POSITIVE", 3, 1 + tableOffset);
                jTable1model.setValueAt("NEGATIVE", 2, 8 + tableOffset);
                jTable1model.setValueAt("POSITIVE", 3, 8 + tableOffset);
                jRadioButton2.getModel().setSelected(false);
                jRadioButton3.getModel().setSelected(false);
                fillTable(1);
                break;
            case 2:
                System.out.println("CL test selected");
                jTable1model.setValueAt("BLANK", 0, 0 + tableOffset);
                jTable1model.setValueAt("NEGATIVE", 1, 0 + tableOffset);
                jTable1model.setValueAt("POSITIVE", 2, 0 + tableOffset);
                jTable1model.setValueAt("NEGATIVE", 0, 3 + tableOffset);
                jTable1model.setValueAt("POSITIVE", 1, 3 + tableOffset);
                jRadioButton1.getModel().setSelected(false);
                jRadioButton3.getModel().setSelected(false);
                fillTable(1);
                break;
            case 3:
                System.out.println("Johne's test selected");
                jTable1model.setValueAt("POSITIVE", 0, 0 + tableOffset);
                jTable1model.setValueAt("POSITIVE", 1, 0 + tableOffset);
                jTable1model.setValueAt("NEGATIVE", 2, 0 + tableOffset);
                jTable1model.setValueAt("NEGATIVE", 3, 0 + tableOffset);
                jRadioButton1.getModel().setSelected(false);
                jRadioButton2.getModel().setSelected(false);
                fillTable(1);
                break;

            default:
                System.out.println("Test not selected");
                break;

        }
    }

    /*
     * This method is used to completely clear a map, both of color and of values
     * It is called after report generation and when switching from one test to another by test select box
     */
    private void clearMap(JTable table) {

        DefaultTableModel jTable1model = (DefaultTableModel) table.getModel();

        //clear table
        for( int j = 0 ; j < jTable1model.getRowCount(); j++ ){
            for( int i = 0 ; i< jTable1model.getColumnCount(); i++ ){
                jTable1model.setValueAt("" , j , i );
            }
        }

        ColorCells cs = new ColorCells(table);
        table.repaint();
        //add row names back
        jTable1model.setValueAt("A" , 0 , 0 );
        jTable1model.setValueAt("B" , 1 , 0 );
        jTable1model.setValueAt("C" , 2 , 0 );
        jTable1model.setValueAt("D" , 3 , 0 );
        jTable1model.setValueAt("E" , 4 , 0 );
        jTable1model.setValueAt("F" , 5 , 0 );
        jTable1model.setValueAt("G" , 6 , 0 );
        jTable1model.setValueAt("H" , 7 , 0 );
    }

    private int fillTable(int source) {

        int animalCount = 0;
        DefaultTableModel jTable2model = (DefaultTableModel) jTable2.getModel();
        jTable2.editCellAt(-1, -1);
        jTable2.getSelectionModel().clearSelection();

        int index = allTabPanes.get(testID).getSelectedIndex();
        WellMap map = allTestAnimals.get(testID).get(index);
        //WellMap map = allTestAnimals.get(testID).get(0);
        //print rows in animal ID input column
        if(source == 0) {
            int rowCount = jTable2model.getRowCount();
            System.out.println("Row Count: " + rowCount);
            if (rowCount < 1) {
                System.out.println("No data to push to map");
                return -1;
            }


            for (int i = 0; i < rowCount; i++) {
                String element = (String) jTable2model.getValueAt(i, 0);
                animalCount = actualFillTable(element, animalCount, map);
            }

            jTable2model.setNumRows(0);
        } else {    //Being called from test radio button switch. Animal count doesn't matter
            //WellMap map = allTestAnimals.get(testID).get(0);
            ArrayList<String> curAnimalList = map.getAnimalList();
            if (curAnimalList.size() < 1) {
                System.out.println("No animals to populate on table");
                return -1;
            }
            //Reset fillX and fillY so that animals are added from the start
            map.fillY = 0;
            map.fillX = 1;
            //Currently not saving animalCount when repopulating list because animal count is saved
            //  the first time animals are saved to list
            for (int j = 0; j < curAnimalList.size(); j++) {
                String element = curAnimalList.get(j);
                actualFillTable(element, animalCount, map);
            }

        }
        return animalCount;
    }

    private int actualFillTable(String element, int animalCount, WellMap map) {

        //Use the map's fillX and fillY not the global ones
        if (element != null && element != "" && element != " ") {

            if (map.fillX > 12) {
                System.out.println("Too many animals");
                //Return max amount of animals possible
                return 96;
            }

            for (int l = 0; l < testXVals.size(); l++) {

                if (map.fillX == (testXVals.get(l) + 1) && map.fillY == testYVals.get(l)) {
                    System.out.println("Collision at: " + map.fillX + ", " + map.fillY);
                    if (map.fillY < 7) {
                        map.fillY++;
                    } else {
                        map.fillY = 0;
                        map.fillX++;
                    }
                }

            }

            //jTable1.setValueAt(element, map.fillY, map.fillX);
            currentTable.setValueAt(element, map.fillY, map.fillX);

            map.fillY++;

            if (map.fillY > 7) {

                map.fillX++;
                map.fillY = 0;
            }
            System.out.println("Cellpos x: " + map.fillX + " y: " + map.fillY);
            animalCount++;
        } else {
            System.out.println("Null or empty element, not pushing to map");
            System.out.println(element);
        }

        return animalCount;
    }

    private void saveCustomer(int animalCount) {
        //get data from buttons
        DerbyDao dao = new DerbyDao();
        //need to decide which fields are necessary
        //put data in report object

        Client customer = new Client(
                jTextField10.getText(),                    //company name
                jTextField1.getText(),                     //client name
                jTextField2.getText(),                     //address
                jTextField3.getText(),                     //city
                (String) jComboBox1.getSelectedItem(),     //state
                jTextField4.getText(),                     //zip
                jTextField6.getText(),                     //email address
                jTextField7.getText(),                     //phone 1
                jTextField8.getText()                      //phone 2
        );
    /*
        private javax.swing.JTextField jTextField1;         //Client name
        private javax.swing.JTextField jTextField2;         //Address
        private javax.swing.JTextField jTextField3;         //City
        private javax.swing.JTextField jTextField4;         //Zip
        private javax.swing.JTextField jTextField5;         //Date - With Report
        private javax.swing.JTextField jTextField6;         //Email Address
        private javax.swing.JTextField jTextField7;         //Phone 1
        private javax.swing.JTextField jTextField8;         //Phone 2
        private javax.swing.JTextField jTextField9;         //LOGID
        private javax.swing.JTextField jTextField10;        //CompanyName
        */
        if(existingClient) {            //It's an existing client. Check for changes and update if necessary
            checkClientInfo(customer);
        } else if(!existingClient) {    //It's a new client. Add to DB and update name list
            dao.addClient(customer);
            dao.getClients(names);
        }
        //Always set to false after adding or skipping client
        existingClient = false;
        String dateTested = datePicker.getModel().getValue().toString();

        Report newReport = new Report(customer,
                (String)jComboBox2.getSelectedItem(),
                dateTested,                      //Date Tested
                animalCount,
                testID,
                jTextField9.getText()                      //logID
        );

        newReport.setWellMap(currentIndex.get(testID));
        currentTest.reportList.add(newReport);

        //clear fields
        for (JTextField e : textFields) {
            e.setText("");
        }
    }

    private void checkClientInfo(Client builtClient) {
        Client existing = dao.getOneClient(jTextField10.getText());
        if (existing == null) {
            JOptionPane.showMessageDialog(null, "Client not found.");
        } else {
            if(!existing.getCompanyName().equals(builtClient.getCompanyName()) || !existing.getName().equals(builtClient.getName())
                || !existing.getAddress().equals(builtClient.getAddress()) || !existing.getCity().equals(builtClient.getCity()) ||
                    !existing.getState().equals(builtClient.getState()) || !existing.getZip().equals(builtClient.getZip())
                || !existing.getPhoneOne().equals(builtClient.getPhoneOne()) || !existing.getPhoneTwo().equals(builtClient.getPhoneTwo())
                || !existing.getEmail().equals(builtClient.getEmail()))
            {
                dao.updateSingleClient(builtClient);

            }
        }

    }

    /*
     * Method to get just the animals from the table
     */
    private void getCellValues(JTable table, int fillX, int fillY) {
        //fillX 1 and fillY 0 means nothing has been added
        //Is in earlier check because fillY != 0 && fillX != 1 doesn't work, is too broad of a condition
        boolean none = false;
        if(fillY == 0 && fillX == 1) {
            none = true;
        }

        if(!none) {
            //DefaultTableModel jTable1model = (DefaultTableModel) jTable1.getModel();
            DefaultTableModel jTable1model = (DefaultTableModel) table.getModel();

            System.out.println("Column count: " + jTable1model.getColumnCount());
            System.out.println("Row count: " + jTable1model.getRowCount());

            //iterate through cell map and put values in an array list
            for (int j = 1; j < jTable1model.getColumnCount(); j++) {   //x
                for (int i = 0; i < jTable1model.getRowCount(); i++) {  //y
                    String value = jTable1model.getValueAt(i, j).toString();
                    if (!value.isEmpty() && !value.equals("POSITIVE") && !value.equals("NEGATIVE") && !value.equals("BLANK")) {
                        currentTest.animalIDList.add(jTable1model.getValueAt(i, j).toString());
                        System.out.println("Added " + jTable1model.getValueAt(i, 0).toString() + " to the animal ID list");
                    }
                }

            }
        }
    }



    public void setTestVals(int testID) {

        testXVals = new ArrayList<Integer>();
        testYVals = new ArrayList<Integer>();

        switch (testID) {
            case 1:
                //BLV
                testXVals.add(1);
                testXVals.add(1);
                testXVals.add(8);
                testXVals.add(8);

                testYVals.add(2);
                testYVals.add(3);
                testYVals.add(2);
                testYVals.add(3);

                break;

            case 2:
                //add x values
                testXVals.add(0);
                testXVals.add(0);
                testXVals.add(0);
                testXVals.add(3);
                testXVals.add(3);

                //add y values
                testYVals.add(0);
                testYVals.add(1);
                testYVals.add(2);
                testYVals.add(0);
                testYVals.add(1);

                break;

            case 3:
                //Johne's Test
                testXVals.add(0);
                testXVals.add(0);
                testXVals.add(0);
                testXVals.add(0);

                testYVals.add(0);
                testYVals.add(1);
                testYVals.add(2);
                testYVals.add(3);

                break;
            default:
                break;

        }

    }

    private void setTestGUI(int testType) {
        switch (testType) {
            case 1:
                //BLV Test
                testID = 1;
                populateTestValues();
                setTestVals(1);
                jRadioButton1.setSelected(true);
                break;
            case 2:
                //CL Test
                testID = 2;
                populateTestValues();
                setTestVals(2);
                jRadioButton2.setSelected(true);
                break;
            case 3:
                //Johne's Test
                testID = 3;
                populateTestValues();
                setTestVals(3);
                jRadioButton3.setSelected(true);
                break;
            default:
                break;
        }

    }


    //personal variables

        //  0 is blank, 1 is BLV, 2 is CL, 3 is Johne's. Each is a linked list of maps
    int testID = -1;
    //private ArrayList<String> animalIDList = new ArrayList<String>();
    //private ArrayList<Report> reportList = new ArrayList<Report>();
    private ArrayList<Float> parsedValues = new ArrayList<Float>();
    private ArrayList<TestType> allTests;
    private static ArrayList<Integer> currentIndex;
    private TestType currentTest;
    //Holds all well maps. Currently another arraylist but want to switch to be linkedList as inner data structure
    private ArrayList<ArrayList<WellMap>> allTestAnimals = new ArrayList<ArrayList<WellMap>>(4);
    //Names is the array of names used for autocomplete
    //existingClient is boolean used to tell whether to add to database or not
    private ArrayList<String> names = new ArrayList<String>();
    private boolean existingClient = false;
    private int fillX = 1;
    private int fillY = 0;
    ArrayList<Integer> testXVals;
    ArrayList<Integer> testYVals;
    private DerbyDao dao;
    private StateSerializer state;
    private ArrayList<JTextField> textFields = new ArrayList<>();
    private String fileName;

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private JLabel jLabel1;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private JRadioButton jRadioButton1;
    private JRadioButton jRadioButton2;
    private JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    //private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private JTextField jTextField1;
    private JTextField jTextField10;
    private JTextField jTextField11;
    private JTextField jTextField2;
    private JTextField jTextField3;
    private JTextField jTextField4;
    private JTextField jTextField5;
    private JDatePickerImpl datePicker;                 //Date Tested
    private JTextField jTextField6;
    private JTextField jTextField7;
    private JTextField jTextField8;
    private JTextField jTextField9;
    private javax.swing.JTabbedPane currentTabPane;
    private JTable currentTable;
    private ArrayList<JTabbedPane> allTabPanes;
    // End of variables declaration



    /**** WINDOW LISTENER METHODS ********/
    @Override
    public void windowGainedFocus(WindowEvent e) {

    }

    @Override
    public void windowLostFocus(WindowEvent e) {

    }

    @Override
    public void windowOpened(WindowEvent e) {

        //TODO: Adjust where animals are added
        /*
        state.deserialize();
        reportList = state.getReports();
        testID = state.getCurrentTest();
        for(Report n: reportList) {
            n.createTestObject(testID);
        }

        if (!state.getResultName().equals("")) {
            ColorCells cs = new ColorCells(jTable1, state.getResultName(), testID);
            jTable1.repaint();
        }

        setTestGUI(testID);
        jTable1.setModel(state.getCurrentMap());
        fillX = state.getCurFillX();
        fillY = state.getCurFillY();*/

    }

    @Override
    public void windowClosing(WindowEvent e) {
        System.out.println("Window is closing");

        //state.setCurrentMap(jTable1.getModel());
        //state.setReports(reportList);
        //state.setResultName(jTextField11.getText());
        state.setCurrentTest(testID);
        state.setCurFillX(fillX);
        state.setCurFillY(fillY);
        state.serialize();
        dao.shutDown();

    }

    @Override
    public void windowClosed(WindowEvent e) {

    }

    @Override
    public void windowIconified(WindowEvent e) {

    }

    @Override
    public void windowDeiconified(WindowEvent e) {

    }

    @Override
    public void windowActivated(WindowEvent e) {

    }

    @Override
    public void windowDeactivated(WindowEvent e) {

    }

    @Override
    public void windowStateChanged(WindowEvent e) {

    }

}
